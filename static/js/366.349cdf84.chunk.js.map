{"version":3,"file":"static/js/366.349cdf84.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/authPages/RegisterPage.styled.jsx","pages/authPages/RegisterPage.jsx"],"sourcesContent":["import { Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const RegisterFormEl = styled.form`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const RegisterFormTitle = styled.h1`\n  font-weight: 500;\n  font-size: 36px;\n  line-height: 1.36;\n  color: ${({ theme }) => theme.color.secondary};\n  margin-bottom: 40px;\n\n  @media screen and (max-width: 767px) {\n    font-size: 24px;\n    line-height: 1.38;\n  }\n`;\n\nexport const RegisterFormUsernameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error }) => (error ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error }) => (error ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormUsernameInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.color.error : theme.color.btnDark)};\n  border-radius: 40px;\n`;\n\nexport const RegisterFormEmailContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error }) => (error ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error }) => (error ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormEmailInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.color.error : theme.color.btnDark)};\n  border-radius: 40px;\n`;\n\nexport const RegisterFormInput = styled(Field)`\n  padding: 12px 0;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  box-sizing: border-box;\n\n  width: 100%;\n  height: 48px;\n  border: none;\n  outline: none;\n`;\n\nexport const ErrorIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nexport const ErrorMessage = styled.div`\n  padding-left: 16px;\n  margin-top: 4px;\n  color: ${({ theme }) => theme.color.error};\n`;\n\nexport const RegisterFormPasswordContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  margin-bottom: ${({ error, secure }) => (error || secure ? '6px' : '32px')};\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: ${({ error, secure }) => (error || secure ? '1px' : '24px')};\n  }\n`;\n\nexport const RegisterFormPasswordInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 16px;\n\n  border: 1px solid\n    ${({ theme, error, secure }) =>\n      error\n        ? theme.color.error\n        : secure\n        ? theme.color.indicator\n        : theme.color.btnDark};\n  border-radius: 40px;\n`;\n\nexport const PasswordIcon = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const EyeIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nexport const CheckMarkIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nexport const InfoMessage = styled.div`\n  padding-left: 16px;\n  margin-top: 4px;\n  color: ${({ theme }) => theme.color.indicator};\n`;\n\nexport const RegisterErrorMessage = styled.div`\n  padding: 15px 16px 0 16px;\n  color: ${({ theme }) => theme.color.error};\n`;\n\nexport const RegisterBtn = styled.button`\n  margin-top: 8px;\n  margin-bottom: 20px;\n  width: 100%;\n\n  padding: 10px 0 10px 0;\n\n  background: ${({ theme }) => theme.color.btnDark};\n  border: none;\n  border-radius: 40px;\n\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n\n  letter-spacing: 0.04em;\n\n  color: #ffffff;\n\n  @media screen and (max-width: 767px) {\n    margin-top: 41px;\n    margin-bottom: 24px;\n  }\n`;\n\nexport const LoginText = styled.p`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.3;\n  letter-spacing: 0.04em;\n  color: #888888;\n`;\n\nexport const LoginLink = styled(Link)`\n  text-decoration-line: underline;\n  color: ${({ theme }) => theme.color.btnDark};\n  display: inline;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport theme from 'components/theme';\n\nimport * as Element from './RegisterForm.styled';\n\nimport IconCheck from 'images/icons/IconCheck';\nimport IconCross from 'images/icons/IconCross';\nimport IconEyeOpen from 'images/icons/IconEyeOpen';\nimport IconEyeClosed from 'images/icons/IconEyeClosed';\nimport { useAuth } from 'hooks';\n\nconst registerSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Name is required')\n    .matches(/^[a-zA-Z\\s]*$/),\n  email: Yup.string()\n    .email('Enter a valid Email')\n    .required('Email is required')\n    .matches(\n      /^(?=.{10,63}$)(([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1})@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/,\n      'Enter a valid Email'\n    ),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .max(16, 'Password must be at most 16 characters')\n    .matches(\n      /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])([0-9a-zA-Z]{6,})*$/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one digit'\n    ),\n  confirmPassword: Yup.string()\n    .required('Confirm password is required')\n    .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n});\n\nconst data = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [emailExist, setEmailExist] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const { currentTheme } = useAuth();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleClickShowConfirmPassword = () =>\n    setShowConfirmPassword(show => !show);\n\n  const handleFormSubmit = async (values, { setSubmitting, resetForm }) => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n    const credentials = {\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n\n    try {\n      const response = await dispatch(register(credentials));\n      if (response.error) {\n        setEmailExist(false);\n      } else {\n        setEmailExist(true);\n        navigate('/user');\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={data}\n      validationSchema={registerSchema}\n      validateOnChange={false}\n      onSubmit={handleFormSubmit}\n    >\n      {({\n        values,\n        errors,\n        setErrors,\n        touched,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n        handleSubmit,\n        resetForm,\n      }) => {\n        const isPasswordValid = values.password && values.password.length >= 8;\n        const handleFieldChange = e => {\n          const { name } = e.target;\n          setErrors({ ...errors, [name]: '' });\n          handleChange(e);\n        };\n\n        return (\n          <Element.RegisterFormEl onSubmit={handleSubmit}>\n            <Element.RegisterFormTitle>Registration</Element.RegisterFormTitle>\n            <Element.RegisterFormUsernameContainer\n              error={errors.name && touched.name}\n            >\n              <Element.RegisterFormUsernameInputContainer\n                error={errors.name && touched.name}\n                style={{\n                  borderColor:\n                    errors.name && touched.name ? '#F43F5E' : '#54ADFF',\n                }}\n              >\n                <Element.RegisterFormInput\n                  type=\"string\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  value={values.name}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                {errors.name && touched.name && values.name && (\n                  <Element.ErrorIcon\n                    onClick={() => {\n                      resetForm({ values: { ...values, name: '' } });\n                    }}\n                  >\n                    <IconCross fill={theme[currentTheme].color.error} />\n                  </Element.ErrorIcon>\n                )}\n              </Element.RegisterFormUsernameInputContainer>\n              {errors.name && touched.name && (\n                <Element.ErrorMessage name=\"name\">\n                  {errors.name}\n                </Element.ErrorMessage>\n              )}\n            </Element.RegisterFormUsernameContainer>\n\n            <Element.RegisterFormEmailContainer\n              error={errors.email && touched.email}\n            >\n              <Element.RegisterFormEmailInputContainer\n                error={errors.email && touched.email}\n                style={{\n                  borderColor:\n                    errors.email && touched.email ? '#F43F5E' : '#54ADFF',\n                }}\n              >\n                <Element.RegisterFormInput\n                  type=\"string\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  value={values.email}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                {errors.email && touched.email && values.email && (\n                  <Element.ErrorIcon\n                    onClick={() => {\n                      resetForm({ values: { ...values, email: '' } });\n                    }}\n                  >\n                    <IconCross fill={theme[currentTheme].color.error} />\n                  </Element.ErrorIcon>\n                )}\n              </Element.RegisterFormEmailInputContainer>\n\n              {errors.email && touched.email && (\n                <Element.ErrorMessage name=\"email\">\n                  {errors.email}\n                </Element.ErrorMessage>\n              )}\n            </Element.RegisterFormEmailContainer>\n\n            <Element.RegisterFormPasswordContainer\n              error={errors.password && touched.password}\n              secure={isPasswordValid}\n            >\n              <Element.RegisterFormPasswordInputContainer\n                error={errors.password && touched.password}\n                secure={isPasswordValid}\n                style={{\n                  borderColor:\n                    errors.password && touched.password\n                      ? '#F43F5E'\n                      : isPasswordValid\n                      ? '#00C3AD'\n                      : '#54ADFF',\n                }}\n              >\n                <Element.RegisterFormInput\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  value={values.password}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                <Element.PasswordIcon>\n                  <Element.EyeIcon\n                    onClick={handleClickShowPassword}\n                    error={errors.password && touched.password}\n                    secure={isPasswordValid}\n                  >\n                    {showPassword ? (\n                      <IconEyeOpen\n                        fill={\n                          errors.password && touched.password\n                            ? theme[currentTheme].color.error\n                            : isPasswordValid\n                            ? theme[currentTheme].color.indicator\n                            : theme[currentTheme].color.btnDark\n                        }\n                      />\n                    ) : (\n                      <IconEyeClosed\n                        fill={\n                          errors.password && touched.password\n                            ? theme[currentTheme].color.error\n                            : isPasswordValid\n                            ? theme[currentTheme].color.indicator\n                            : theme[currentTheme].color.btnDark\n                        }\n                      />\n                    )}\n                  </Element.EyeIcon>\n                  {isPasswordValid && (\n                    <Element.CheckMarkIcon>\n                      <IconCheck fill={theme[currentTheme].color.indicator} />\n                    </Element.CheckMarkIcon>\n                  )}\n                  {errors.password && touched.password && values.password && (\n                    <Element.ErrorIcon\n                      onClick={() => {\n                        resetForm({ values: { ...values, password: '' } });\n                      }}\n                    >\n                      <IconCross fill={theme[currentTheme].color.error} />\n                    </Element.ErrorIcon>\n                  )}\n                </Element.PasswordIcon>\n              </Element.RegisterFormPasswordInputContainer>\n\n              {errors.password && touched.password && (\n                <Element.ErrorMessage>{errors.password}</Element.ErrorMessage>\n              )}\n              {isPasswordValid && (\n                <Element.InfoMessage valid={isPasswordValid}>\n                  Password is secure\n                </Element.InfoMessage>\n              )}\n            </Element.RegisterFormPasswordContainer>\n\n            <Element.RegisterFormPasswordContainer\n              error={errors.confirmPassword && touched.confirmPassword}\n            >\n              <Element.RegisterFormPasswordInputContainer\n                error={errors.confirmPassword && touched.confirmPassword}\n                style={{\n                  borderColor:\n                    errors.confirmPassword && touched.confirmPassword\n                      ? '#F43F5E'\n                      : '#54ADFF',\n                }}\n              >\n                <Element.RegisterFormInput\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  value={values.confirmPassword}\n                  onChange={handleFieldChange}\n                  onBlur={handleBlur}\n                  disabled={loading}\n                />\n                <Element.PasswordIcon>\n                  <Element.EyeIcon\n                    onClick={handleClickShowConfirmPassword}\n                    error={errors.confirmPassword && touched.confirmPassword}\n                  >\n                    {showConfirmPassword ? (\n                      <IconEyeOpen\n                        fill={\n                          errors.confirmPassword && touched.confirmPassword\n                            ? theme[currentTheme].color.error\n                            : isPasswordValid\n                            ? theme[currentTheme].color.indicator\n                            : theme[currentTheme].color.btnDark\n                        }\n                      />\n                    ) : (\n                      <IconEyeClosed\n                        fill={\n                          errors.confirmPassword && touched.confirmPassword\n                            ? theme[currentTheme].color.error\n                            : isPasswordValid\n                            ? theme[currentTheme].color.indicator\n                            : theme[currentTheme].color.btnDark\n                        }\n                      />\n                    )}\n                  </Element.EyeIcon>\n                  {errors.confirmPassword &&\n                    touched.confirmPassword &&\n                    values.confirmPassword && (\n                      <Element.ErrorIcon\n                        onClick={() => {\n                          resetForm({\n                            values: { ...values, confirmPassword: '' },\n                          });\n                        }}\n                      >\n                        <IconCross fill={theme[currentTheme].color.error} />\n                      </Element.ErrorIcon>\n                    )}\n                </Element.PasswordIcon>\n              </Element.RegisterFormPasswordInputContainer>\n\n              {errors.confirmPassword && touched.confirmPassword && (\n                <Element.ErrorMessage>\n                  {errors.confirmPassword}\n                </Element.ErrorMessage>\n              )}\n            </Element.RegisterFormPasswordContainer>\n\n            {!emailExist && (\n              <Element.RegisterErrorMessage>\n                This email is already in use. Please, try with another email!\n              </Element.RegisterErrorMessage>\n            )}\n\n            <Element.RegisterBtn type=\"submit\" disabled={isSubmitting}>\n              Registration\n            </Element.RegisterBtn>\n            <Element.LoginText>\n              Already have an account?\n              <Element.LoginLink to={'/login'}>Log In</Element.LoginLink>\n            </Element.LoginText>\n          </Element.RegisterFormEl>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\nimport desktop_1x from '../../images/MainPageImages/bg-lg@1x.png';\nimport desktop_2x from '../../images/MainPageImages/bg-lg@2x.png';\nimport tablet_1x from '../../images/MainPageImages/bg-md@1x.png';\nimport tablet_2x from '../../images/MainPageImages/bg-md@2x.png';\nimport mobile_1x from '../../images/MainPageImages/bg-sm@1x.png';\nimport mobile_2x from '../../images/MainPageImages/bg-sm@2x.png';\n\nexport const RegisterBorder = styled.div`\n  padding: 60px 75px;\n  box-sizing: border-box;\n  width: 608px;\n  height: fit-content;\n  background: #ffffff;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n\n  @media screen and (max-width: 767px) {\n    margin: 0 auto;\n    padding: 40px 12px;\n    max-width: 280px;\n\n    box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n    border-radius: 20px;\n  }\n`;\n\nexport const RegisterBackground = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 80px;\n  height: 100vh;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  background-image: url('${desktop_1x}');\n\n  @media (min-device-pixel-ratio: 2),\n    (-webkit-min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url('${desktop_2x}');\n  }\n\n  @media screen and (max-width: 1279px) {\n    background-image: url('${tablet_1x}');\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${tablet_2x}');\n    }\n  }\n\n  @media screen and (max-width: 767px) {\n    padding-top: 44px;\n    background-image: url('${mobile_1x}');\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${mobile_2x}');\n    }\n  }\n`;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nimport { RegisterBackground, RegisterBorder } from './RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <RegisterBackground>\n      <RegisterBorder>\n        <RegisterForm />\n      </RegisterBorder>\n    </RegisterBackground>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["RegisterFormEl","styled","RegisterFormTitle","theme","color","secondary","RegisterFormUsernameContainer","error","RegisterFormUsernameInputContainer","btnDark","RegisterFormEmailContainer","RegisterFormEmailInputContainer","RegisterFormInput","Field","ErrorIcon","ErrorMessage","RegisterFormPasswordContainer","secure","RegisterFormPasswordInputContainer","indicator","PasswordIcon","EyeIcon","CheckMarkIcon","InfoMessage","RegisterErrorMessage","RegisterBtn","LoginText","LoginLink","Link","registerSchema","Yup","shape","name","required","matches","email","password","min","max","confirmPassword","oneOf","data","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","emailExist","setEmailExist","loading","setLoading","currentTheme","useAuth","navigate","useNavigate","dispatch","useDispatch","handleClickShowPassword","show","handleClickShowConfirmPassword","handleFormSubmit","values","setSubmitting","resetForm","credentials","register","console","initialValues","validationSchema","validateOnChange","onSubmit","errors","setErrors","touched","handleChange","handleBlur","isSubmitting","handleSubmit","isPasswordValid","length","handleFieldChange","e","target","style","borderColor","type","placeholder","value","onChange","onBlur","disabled","onClick","IconCross","fill","IconEyeOpen","IconEyeClosed","IconCheck","valid","to","RegisterBorder","RegisterBackground","desktop_1x","desktop_2x","tablet_1x","tablet_2x","mobile_1x","mobile_2x"],"sourceRoot":""}