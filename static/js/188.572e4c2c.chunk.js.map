{"version":3,"file":"static/js/188.572e4c2c.chunk.js","mappings":"wPAIaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mTAeVE,EAAOF,EAAAA,GAAAA,IAAH,iGAOJG,EAAQH,EAAAA,GAAAA,GAAH,kJASLI,GAAcJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,mRAeXM,EAASN,EAAAA,GAAAA,OAAH,kXAoBNO,GAAgBP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,sLAWbS,EAAOT,EAAAA,GAAAA,EAAH,sKAWJU,EAAYV,EAAAA,GAAAA,IAAH,6G,iDCrFhBW,EAAmBC,EAAAA,KAAaC,MAAM,CAC5CC,MAAMF,EAAAA,KAAaE,MAAM,uBAAuBC,WAChDC,SAASJ,EAAAA,KAAaK,IAAI,EAAG,aAAaC,IAAI,GAAI,YAAYH,aAsE9D,EAlEkB,WACd,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOP,EAAP,KAAcQ,EAAd,KACA,GAAgCD,EAAAA,EAAAA,UAAS,IAAzC,eAAOL,EAAP,KAAiBO,EAAjB,KAIMC,EAAoB,SAAAC,GACtBA,EAAMC,iBAEVP,GACKQ,EAAAA,EAAAA,IAAM,CACHb,MAAOA,EACPE,SAAUA,KAGdY,GACD,EAEGA,EAAQ,WACVN,EAAS,IACTC,EAAY,GACb,EAEP,OACI,+BACC,SAAC,KAAD,CACCM,cAAe,CACbf,MAAO,GACPE,SAAU,IAEZc,iBAAkBnB,EAClBoB,SAAU,SAAAC,GACRC,QAAQC,IAAI,SAAUF,EACvB,EARF,SASI,gBAAGG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACJ,UAACrC,EAAD,CACCgC,SAAUP,EADX,WAGG,SAACrB,EAAD,UAAO,WACP,UAACD,EAAD,YACA,SAACE,EAAD,CAAaiC,KAAK,QACdC,KAAK,QACLC,MAAOzB,EACP0B,SAAU,SAACf,GAAD,OAASH,EAASG,EAAMgB,cAAcF,MAAtC,EACTG,YAAY,QACZ3B,UAAQ,IACNqB,EAAQtB,OAASqB,EAAOrB,QAAU,SAACJ,EAAD,UAAYyB,EAAOrB,SAC5D,SAACV,EAAD,CAAciC,KAAK,WACfC,KAAK,WACLC,MAAOvB,EACPwB,SAAU,SAACf,GAAD,OAASF,EAAYE,EAAMgB,cAAcF,MAAzC,EACTG,YAAY,WACZ3B,UAAQ,IACNqB,EAAQpB,UAAYmB,EAAOnB,WAAa,SAACN,EAAD,UAAYyB,EAAOnB,eAElE,SAACV,EAAD,CAAQ+B,KAAK,SAAb,SAAsB,WACtB,UAAC5B,EAAD,WAAM,0BAAsB,SAACF,EAAD,CAAeoC,GAAG,YAAlB,SAA8B,kBAtBzD,KA6BR,C,2CC7EgBC,EAAcC,EAAQ,KAA/BC,QAMR,UAJkB,WAChB,OAAM,SAACF,EAAD,GACP,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/authPages/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components'\nimport { NavLink } from 'react-router-dom';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\nwidth: 608px;\nmargin: auto;\ndisplay:flex;\nflex-direction:column;\nalign-items: center;\njustify-content: center;\npadding: 60px 75px;\nborder-radius: 40px;\nmargin-top: 80px;\n\nbackground-color: rgba(255, 255, 255, 1);\n\nbox-shadow: 3px 8px 14px 0px rgba(136, 198, 253, 0.19);\n`\nexport const Wrap = styled.div`\ndisplay: flex;\nflex-direction:column;\ngap:32px;\nmargin-bottom: 60px;\n`\n\nexport const Title = styled.h2`\ntext-align: center;\nfont-size: 36px;\nfont-style: normal;\nfont-weight: 500;\nline-height: normal;\nmargin-bottom:40px;\n`\n\nexport const FieldStyled = styled(Field)`\nfont-size: 16px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 1.5;\nletter-spacing: 0.64px;\npadding: 12px 16px;\nwidth:458px;\nborder-radius: 40px;\nborder: 1px solid #54ADFF;\n\n/* background-color:rgba(255, 255, 255, 1); */\n\ncolor: #888;`\n\nexport const Button = styled.button`\ndisplay: flex;\nwidth: 478px;\nheight: 48px;\npadding: 10px 28px;\njustify-content: center;\nalign-items: center;\nborder-radius: 40px;\nfont-size: 20px;\nfont-style: normal;\nfont-weight: 600;\nline-height: normal;\nletter-spacing: 0.8px;\nborder: transparent;\nmargin-bottom: 20px;\n\ncolor:rgba(255, 255, 255, 1);\nbackground-color: #54ADFF;\n`\n\nexport const StyledNavLink = styled(NavLink)`\nfont-size: 12px;\nfont-style: normal;\nfont-weight: 400;\nline-height: normal;\nletter-spacing: 0.48px;\ntext-decoration-line: underline;\n\ncolor: #54ADFF;\n`\n\nexport const Text = styled.p`\ntext-align: center;\nfont-size: 12px;\nfont-style: normal;\nfont-weight: 400;\nline-height: normal;\nletter-spacing: 0.48px;\n\ncolor: #888;\n`\n\nexport const TextError = styled.div`\nfont-size: 12px;\nline-height: 1.3;\nfont-weight: 400;\ncolor:rgba(244, 63, 94, 1);\n`\n\n","import {Title, FieldStyled, FormStyled, Button, Text, Wrap, StyledNavLink, TextError} from './LoginForm.styled'\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Formik} from 'formik';\nimport * as Yup from 'yup'\n\nconst validLogInSchema = Yup.object().shape({\nemail:Yup.string().email('Enter a valid email').required(),\npassword:Yup.string().min(6, 'To short!').max(16, 'To long!').required()\n})\n   \n\nconst LoginForm = () => {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n\n\n    const handleLogInSubmit = event => {\n        event.preventDefault();\n\n    dispatch(\n         logIn({\n            email: email,\n            password: password,\n          })\n        );\n        reset();\n      };\n\n    const reset = () => {\n        setEmail('');\n        setPassword('');\n      };\n\nreturn(\n    <> \n     <Formik\n      initialValues={{\n        email: '',\n        password: ''\n      }}\n      validationSchema={validLogInSchema}\n      onSubmit={values => {\n        console.log(\"submit\", values);\n      }}>\n        {({ errors, touched }) => (\n     <FormStyled\n      onSubmit={handleLogInSubmit}\n      >\n        <Title>Login</Title>\n        <Wrap>\n        <FieldStyled type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={(event)=>setEmail(event.currentTarget.value)}\n             placeholder='Email' \n             required/>\n              {touched.email && errors.email &&  <TextError>{errors.email}</TextError> }\n        <FieldStyled  type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={(event)=>setPassword(event.currentTarget.value)}\n             placeholder='Password'\n             required/>\n              {touched.password && errors.password &&  <TextError>{errors.password}</TextError> }\n        </Wrap>\n        <Button type='submit'>Login</Button>\n        <Text>Don't have an account?<StyledNavLink to=\"/register\">Register</StyledNavLink></Text>\n     </FormStyled>\n     )}\n     </Formik>\n    </>\n   \n)\n}\n\nexport default LoginForm","const { default: LoginForm } = require(\"components/LoginForm/LoginForm\")\n\nconst LoginPage = () => {\n  return<LoginForm/> ;\n};\n\nexport default LoginPage;\n"],"names":["FormStyled","styled","Form","Wrap","Title","FieldStyled","Field","Button","StyledNavLink","NavLink","Text","TextError","validLogInSchema","Yup","shape","email","required","password","min","max","dispatch","useDispatch","useState","setEmail","setPassword","handleLogInSubmit","event","preventDefault","logIn","reset","initialValues","validationSchema","onSubmit","values","console","log","errors","touched","type","name","value","onChange","currentTarget","placeholder","to","LoginForm","require","default"],"sourceRoot":""}